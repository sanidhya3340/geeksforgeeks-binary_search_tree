#include<bits/stdc++.h>
using namespace std;

struct node {
    int data;
    node* left;
    node* right;
};

node* newNode(int data){
    node* temp = (node*)malloc(sizeof(node));
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}

void printInorder(node* root){
    if(!root) return;
    printInorder(root->left);
    cout<<root->data<<" ";
    printInorder(root->right);
}

void storeInorder(node* root, int inorder[],int *index){
    if(!root) return;
    storeInorder(root->left, inorder, index);
    inorder[(*index)] = root->data;
    (*index)++;
    storeInorder(root->right, inorder, index);
}

int *merge(int arr1[], int arr2[], int m, int n){
    int *mergedArr = new int [m+n];
    int i=0,j=0,k=0;

    while(i<m && j<n){
        if(arr1[i] < arr2[j]){
            mergedArr[k] = arr1[i];
            i++;
        }
        else {
            mergedArr[k] = arr2[j];
            j++;
        }
        k++;
    }

    while(i<m){
        mergedArr[k] = arr1[i];
        i++;k++;
    }

    while(j<n){
        mergedArr[k] = arr2[j];
        j++;k++;
    }

    return mergedArr;
}

node* storedArraytoBST(int arr[], int start, int end){
    if(start > end) return NULL;
    int mid = (start + end) / 2;
    node* root = newNode(arr[mid]);
    root->left = storedArraytoBST(arr,start,mid-1);
    root->right = storedArraytoBST(arr, mid+1, end);

    return root;
}

node* mergeTrees(node* root1,node* root2,int m, int n ){
    int *arr1 = new int[m];
    int i=0;
    storeInorder(root1,arr1,&i);

    int *arr2 = new int[n];
    int j=0;
    storeInorder(root2,arr2,&j);

    int *mergedArr = merge(arr1, arr2, m, n);

    return storedArraytoBST(mergedArr, 0 , m+n-1);
}

int main() {

    /* Create following tree as first balanced BST
        100
        / \
        50 300
    / \
    20 70
    */
    node *root1 = newNode(100);
    root1->left     = newNode(50);
    root1->right = newNode(300);
    root1->left->left = newNode(20);
    root1->left->right = newNode(70);
 
    /* Create following tree as second balanced BST
            80
        / \
        40 120
    */
    node *root2 = newNode(80);
    root2->left     = newNode(40);
    root2->right = newNode(120);

    node *mergedTree = mergeTrees(root1, root2, 5, 3);
 
    cout << "Following is Inorder traversal of the merged tree \n";
    printInorder(mergedTree);
 
    return 0;
}
