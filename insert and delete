#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node*right,*left;
};

void inorder(node* root) {
    if(!root) return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

node* createnode(int data) {
    node* newnode = (node*)malloc(sizeof(node*));
    newnode->data = data;
    newnode->left = newnode->right = NULL;
}

node* insert(node* root,int key){
    // cout<<"Into Inset\n";
    if(!root) return createnode(key);
    if(key < root->data) {
        root->left = insert(root->left,key);
    }
    else{
        root-> right = insert(root->right,key);
    }
    return root;
}

node* minValueNode(node* root){
    node* curr = root;
    while(curr && curr->left != NULL)
        curr = curr->left;
    return curr;
}

node* deletenode(node* root,int key){
    if(!root) return root;
    if(key< root->data) root->left = deletenode(root->left,key);
    else if(key > root->data) root->right = deletenode(root->right,key);
    else{
        if(!root->left && !root->right) return NULL;
        else if(!root->right) {
            node* temp = root->left;
            free(root);
            return temp;
        }
        else if(!root->left) {
            node* temp = root->right;
            free(root);
            return temp;
        }

        struct node* temp = minValueNode(root->right);
        root->data = temp->data;
        root->right = deletenode(root->right,temp->data);
        return root;

    }
}

int main(){
    // cout<<"into main\n";

    struct node* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);
    inorder(root);
    cout<<endl;
    root = deletenode(root,50);
    inorder(root);

    return 0;
}
