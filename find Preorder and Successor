#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node*right,*left;
};

void inorder(node* root) {
    if(!root) return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

node* createnode(int data) {
    node* newnode = (node*)malloc(sizeof(node*));
    newnode->data = data;
    newnode->left = newnode->right = NULL;
}

node* insert(node* root,int key){
    // cout<<"Into Inset\n";
    if(!root) return createnode(key);
    if(key < root->data) {
        root->left = insert(root->left,key);
    }
    else{
        root-> right = insert(root->right,key);
    }
    return root;
}

void findPreSuc(node* root, node*& pre, node* &suc, int key ){
    if(!root) return;
    if(root->data == key)  {
        if(root->left != NULL) {
            node* tmp = root->left;
            while(tmp->right)
                tmp = tmp->right;
            pre = tmp;    
        }
        if(root->right != NULL) {
            node* tmp = root->right;
            while(tmp->left)
                tmp = tmp->left;
            suc = tmp;
        }
        return;
    }

    if(root->data > key) {
        suc = root;
        findPreSuc(root->left,pre,suc,key);
    }
    else {
        pre = root;
        findPreSuc(root->right,pre,suc,key);
    }
}

int main(){
    // cout<<"into main\n";

    struct node* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);
    inorder(root);
    cout<<endl;
    // root = deletenode(root,50);
    // inorder(root);

    node *pre = NULL,*suc = NULL;

    findPreSuc(root,pre,suc,30);

    if(pre) cout<<"Pre: "<<pre->data<<endl;
    else cout<<"No Pre"<<endl;
    if(suc) cout<<"Suc: "<<suc->data<<endl;
    else cout<<"No suc"<<endl;

    return 0;
}
