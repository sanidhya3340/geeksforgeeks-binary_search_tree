class Solution {
public:
    class Node{
    public:
        int data;
        Node* left;
        Node* right;
        Node(int d){
            data = d;
            left = right = NULL;
        }
    };
    Node* insert(Node* root,int val){
        if(!root){
            root = new Node(val);
            return root;
        }
        if(root->data<val) return insert(root->left,val);
        else return insert(root->right,val);
    }
    Node* maketree(Node* head,vector<int>&nums,int l,int r){
        int mid = (l+r)/2;
        head = insert(head,nums[mid]);
        
        if(l!=mid){
            head->left = maketree(head,nums,l,mid-1);
        }
        if(r!=mid){
            head->right = maketree(head,nums,mid+1,r);
        }
        
        return head;
    }    
    
    void preorder(Node* root,vector<int>&res){
        if(!root){
            return;
        }
        res.push_back(root->data);
        preorder(root->left,res);
        preorder(root->right,res);
    }

    vector<int> sortedArrayToBST(vector<int>& nums) {
        // Code here
        Node* root = maketree(NULL,nums,0,nums.size()-1);
        vector<int>res;
        preorder(root,res);
        return res;
    }
};
